/*
 * IPS Dashboard
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 6.2.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "/";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let xApiVersion = "TODO_EDIT_THE_X-API-VERSION";

export default function() {
    group("/api/Account/login", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Account/login`;
            // TODO: edit the parameters of the request body.
            let body = {"email": "string", "password": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Beacons/delete", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Beacons/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"macAddress": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Users/delete", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Users/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "username": "string", "phone": "string", "email": "string", "type": "usertype", "registered": "date", "deregistered": "date", "cultureId": "string", "providerId": "long", "logLevel": "logeventtype"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Beacons", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Beacons?SearchTerm=${SearchTerm}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Products/delete", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Products/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/user-roles/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/user-roles/${id}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/permissions/{roleId}", () => {
        let roleId = 'TODO_EDIT_THE_ROLEID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/permissions/${roleId}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/objects", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/objects`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Notifications/stream", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Notifications/stream`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Dashboard/sites", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Dashboard/sites`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Products/item-metadata", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Products/item-metadata`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites/{id}/delete", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites/${id}/delete`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Dashboard/products", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Dashboard/products`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/roles", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/roles`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Dashboard/beacon/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Dashboard/beacon/${id}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Dashboard/beacon/charts/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Dashboard/beacon/charts/${id}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Providers", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Providers`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Alerts", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Alerts?SearchTerm=${SearchTerm}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Providers/delete", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Providers/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "name": "string", "description": "string", "flags": "integer", "parent": "long", "culture": "string", "alias": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Users", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Users?page=${page}&size=${size}&searchTerm=${searchTerm}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Alerts/delete", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Alerts/delete`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Providers/set", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Providers/set`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "name": "string", "description": "string", "flags": "integer", "parent": "long", "culture": "string", "alias": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Account/refresh-token", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Account/refresh-token`;
            // TODO: edit the parameters of the request body.
            let body = {"token": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/permissions/save", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/permissions/save`;
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Beacons/registered", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Beacons/registered`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Account/logout", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Account/logout`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Products/set", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Products/set`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "description": "string", "metadata": "list"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites/{id}/delete-gw/{mac}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let mac = 'TODO_EDIT_THE_MAC'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites/${id}/delete-gw/${mac}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites/${id}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Dashboard/beacon/position/{id}", () => {
        let siteId = 'TODO_EDIT_THE_SITEID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Dashboard/beacon/position/${id}?siteId=${siteId}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/user-roles", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/user-roles`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Notifications", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Notifications?SearchTerm=${SearchTerm}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Account/bootstrap", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Account/bootstrap`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Beacons/set", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Beacons/set`;
            // TODO: edit the parameters of the request body.
            let body = {"macAddress": "string", "name": "string", "product": {"id": "string", "name": "string", "description": "string", "metadata": "list"}, "metadata": "list", "id": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Products/metadata", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Products/metadata`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Products", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Products?SearchTerm=${SearchTerm}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Account/revoke-token", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Account/revoke-token`;
            // TODO: edit the parameters of the request body.
            let body = {"token": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites/gw-registered", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites/gw-registered`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Products/file/upload", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Products/file/upload`;
            // TODO: edit the parameters of the request body.
            let body = {"file": http.file(open("/path/to/file.bin", "b"), "test.bin")};
            let params = {headers: {"Content-Type": "multipart/form-data", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Alerts/set", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Alerts/set`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "checkPeriod": "integer", "enabled": "boolean", "providerId": "long"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Events", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Events?SearchTerm=${SearchTerm}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Security/roles/save", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Security/roles/save`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "description": "string", "providerId": "long"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Dashboard/beacons", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let productId = 'TODO_EDIT_THE_PRODUCTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let siteId = 'TODO_EDIT_THE_SITEID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Dashboard/beacons?SearchTerm=${SearchTerm}&SiteId=${SiteId}&ProductId=${ProductId}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites/set", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites/set`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "topLength": "double", "leftLength": "double", "error": "double", "gateways": "list"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites", () => {
        let searchTerm = 'TODO_EDIT_THE_SEARCHTERM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let size = 'TODO_EDIT_THE_SIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let providerId = 'TODO_EDIT_THE_PROVIDERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let page = 'TODO_EDIT_THE_PAGE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites?SearchTerm=${SearchTerm}&ProviderId=${ProviderId}&Page=${Page}&Size=${Size}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Users/{id}", () => {
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/Users/${id}`;
            let params = {headers: {"x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Sites/set-gateway", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Sites/set-gateway`;
            // TODO: edit the parameters of the request body.
            let body = {"macAddress": "string", "name": "string", "circumscribedRadius": "double", "location": "locationanchor", "envFactor": "integer", "gauge": {"mac": "string", "txPower": "double", "rssi": "double", "radius": "double", "rssIs": "list", "originalRSSIs": "list", "isGage": "boolean", "location": "locationanchor"}, "siteId": "string"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

    group("/api/Users/set", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/Users/set`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "long", "username": "string", "phone": "string", "type": "string", "registered": "date", "deregistered": "date", "cultureId": "string", "providerId": "long", "logLevel": "logeventtype", "password": "string", "roles": "list"};
            let params = {headers: {"Content-Type": "application/json", "x-api-version": `${xApiVersion}`, "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Success": (r) => r.status === 200
            });
        }
    });

}
